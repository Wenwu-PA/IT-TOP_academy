def determinant_3x3(matrix):
    a, b, c = matrix[0]
    d, e, f = matrix[1]
    g, h, i = matrix[2]
    
    return (a * (e * i - f * h) -
            b * (d * i - f * g) +
            c * (d * h - e * g))

def create_matrix_x(matrix, b):
    result = [row[:] for row in matrix]
    for i in range(3):
        result[i][0] = b[i]
    return result

def create_matrix_y(matrix, b):
    result = [row[:] for row in matrix]
    for i in range(3):
        result[i][1] = b[i]
    return result

def create_matrix_z(matrix, b):
    result = [row[:] for row in matrix]
    for i in range(3):
        result[i][2] = b[i]
    return result

def solve_system():
    try:
        # –í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        print("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ 3x3 (–ø–æ—Å—Ç—Ä–æ—á–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)‚úçÔ∏è:")
        matrix_a = []
        for i in range(3):
            row = list(map(float, input(f"–°—Ç—Ä–æ–∫–∞ {i+1}: ").split()))
            if len(row) != 3:
                raise ValueError("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3x3!ü§™‚òπÔ∏è")
            matrix_a.append(row)
        
        # –í–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤
        print("\n–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ (3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)ü§å:")
        matrix_b = list(map(float, input().split()))
        if len(matrix_b) != 3:
            raise ValueError("–ú–∞—Ç—Ä–∏—Ü–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —ç–ª–µ–º–µ–Ω—Ç–∞ü§®!")
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–µ–π
        det_A = determinant_3x3(matrix_a)
        
        if abs(det_A) < 1e-10:
            print("\n–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–º–µ–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è (–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —Ä–∞–≤–µ–Ω –Ω—É–ª—é)üò≤")
            return
        
        print(f"\n–û–±—â–∏–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –º–∞—Ç—Ä–∏—Ü—ã ü¶æA: {det_A:}")
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∞—Å—Ç–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–µ–π
        det_x = determinant_3x3(create_matrix_x(matrix_a, matrix_b))
        det_y = determinant_3x3(create_matrix_y(matrix_a, matrix_b))
        det_z = determinant_3x3(create_matrix_z(matrix_a, matrix_b))
        
        print(f"\n–ß–∞—Å—Ç–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–∏ü¶æ:")
        print(f"Œîx = {det_x:.4f}")
        print(f"Œîy = {det_y:.4f}")
        print(f"Œîz = {det_z:.4f}")
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
        x = det_x / det_A
        y = det_y / det_A
        z = det_z / det_A
        
        print("\n–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ãü¶æ:")
        print(f"x = {x:.4f}")
        print(f"y = {y:.4f}")
        print(f"z = {z:.4f}")
        
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞ü§Ø: {str(e)}")
solve_system()
